#version 330 core
struct Material{
vec3 ambient;
vec3 diffuse;
vec3 specular;
float shininess;
};

struct Light{
vec3 ambient;
vec3 diffuse;
vec3 specular;


vec3 lightDirection;
int lighttype;

float constant;
float linear;
float quadratic;

float anglecutoff;
float distancecutoff;
};
out vec4 FragColor;

in vec3 fragPos;
in vec3 Normal;

uniform Material material;
uniform Light light;
uniform vec3 viewPos;
uniform vec3 lightPos;

void main() 
{
	vec3 lightDir;
	vec3 result;
	bool outrange = false;
	float attenuation = 0.0f;
	float theta = 0.0f;
	if(light.lighttype == 0){
	lightDir = light.lightDirection;
	}else{
	lightDir = normalize(lightPos - fragPos);
	float distance = length(lightPos - fragPos);
	//if bigger that distance only the ambient light
	if(distance > light.distancecutoff){
		outrange = true;
	}else{
		attenuation = 1.0/(light.constant+
		light.linear*distance+
		light.quadratic*distance*distance);
	}
	if(light.lighttype == 2){
		theta = dot(lightDir,-light.lightDirection);
		if(theta< light.anglecutoff){
			outrange = true;
		}
	}
	}
	if(outrange){
		result = light.ambient*material.ambient;
	}else{
		vec3 viewDir = normalize(viewPos-fragPos);
		vec3 reflectDir = reflect(-lightDir,Normal);
		float spec = pow(max(dot(viewDir,reflectDir),0.0),32);
		float diff = max(dot(Normal,lightDir),0.0);
		if(light.lighttype == 0){
			result = light.specular*material.specular*spec + light.diffuse*material.diffuse*diff + light.ambient*material.ambient;
		}else if(light.lighttype == 1){
			result = attenuation*(light.specular*material.specular*spec + light.diffuse*material.diffuse*diff + light.ambient*material.ambient);
		}else{
			result = attenuation*(light.specular*material.specular*spec + light.diffuse*material.diffuse*diff + light.ambient*material.ambient);
		}
	}
	FragColor = vec4(result,1.0); // texture sampler, correspoding texture coordinate
}