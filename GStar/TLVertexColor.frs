#version 330 core
struct Material{
vec3 ambient;
vec3 diffuse;
vec3 specular;
float shininess;
};

out vec4 FragColor;

in vec2 TextCoord;
in vec3 fragPos;
in vec3 Normal;

uniform Material material;
uniform vec3 viewPos;
uniform vec3 ambientLight;
uniform vec3 lightColor;
uniform vec3 lightPos;

uniform sampler2D texture1; // this will be filled automatically by Opengl
uniform sampler2D texture2;
void main() 
{
	vec3 lightDir = normalize(lightPos - fragPos);
	vec3 viewDir = normalize(viewPos-fragPos);
	vec3 reflectDir = reflect(-lightDir,Normal);
	float spec = pow(max(dot(viewDir,reflectDir),0.0),32);
	float diff = max(dot(Normal,lightDir),0.0);
	vec3 result = lightColor*(material.specular*spec+material.diffuse*diff+material.ambient);
	FragColor = mix(texture(texture1,TextCoord),texture(texture2,TextCoord),0.2)* vec4(result,1.0); // texture sampler, correspoding texture coordinate
}