#version 330 core
struct Material{
sampler2D diffuse;
sampler2D specular;
float shininess;
};
struct Light{
vec3 ambient;
vec3 diffuse;
vec3 specular;
};

out vec4 FragColor;

in vec2 TextCoord;
in vec3 fragPos;
in vec3 Normal;

uniform Material material;
uniform Light light;
uniform vec3 viewPos;
uniform vec3 lightPos;

uniform sampler2D texture1; // this will be filled automatically by Opengl
uniform sampler2D texture2;
void main() 
{
	vec3 lightDir = normalize(lightPos - fragPos);
	vec3 viewDir = normalize(viewPos-fragPos);
	vec3 reflectDir = reflect(-lightDir,Normal);
	float spec = pow(max(dot(viewDir,reflectDir),0.0),32);
	float diff = max(dot(Normal,lightDir),0.0);
	vec3 ambient = light.ambient * vec3(texture(material.diffuse,TextCoord));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,TextCoord));
	vec3 specular = light.specular* spec * vec3(texture(material.specular,TextCoord));
	FragColor = vec4(ambient+diffuse+specular,1.0); // texture sampler, correspoding texture coordinate
}