#version 330 core
struct Material{
sampler2D diffuse;
sampler2D specular;
float shininess;
};
struct Light{
vec3 position;
vec3 ambient;
vec3 diffuse;
vec3 specular;

//Point out of the light
vec3 lightDirection;
int lighttype;

float constant;
float linear;
float quadratic;

float anglecutoff;
float inneranglecutoff;
float distancecutoff;
};

out vec4 FragColor;

in vec2 TextCoord;
in vec3 fragPos;
in vec3 Normal;

uniform Material material;

uniform Light light[5];
uniform int numlights;

uniform vec3 viewPos;

vec3 calculateLight(int index, vec3 viewDir){
	vec3 lightDir;
	vec3 result;
	bool outrange = false;
	float attenuation = 0.0f;
	float intensity = 0.0f;
	if(light[index].lighttype == 0){
	lightDir = light[index].lightDirection;
	}else{
	//Point to the light
	lightDir = normalize(light[index].position - fragPos);
	float distance = length(light[index].position - fragPos);
	//if bigger that distance only the ambient light
	if(distance > light[index].distancecutoff){
		outrange = true;
	}else{
		attenuation = 1.0/(light[index].constant+
		light[index].linear*distance+
		light[index].quadratic*distance*distance);
	}if(light[index].lighttype == 2){
		float theta = dot(lightDir,-light[index].lightDirection);
		if(theta< light[index].anglecutoff){
			outrange = true;
		}else{
			float epsilon = light[index].inneranglecutoff - light[index].anglecutoff;
			intensity = clamp((theta - light[index].anglecutoff)/epsilon,0.0f,1.0f);
		}
	}
	}
	if(outrange){
		result = light[index].ambient * vec3(texture(material.diffuse,TextCoord));
	}else{
		vec3 reflectDir = reflect(-lightDir,Normal);
		float spec = pow(max(dot(viewDir,reflectDir),0.0),32);
		float diff = max(dot(Normal,lightDir),0.0);
		vec3 ambient = light[index].ambient * vec3(texture(material.diffuse,TextCoord));
		vec3 diffuse = light[index].diffuse * diff * vec3(texture(material.diffuse,TextCoord));
		vec3 specular = light[index].specular* spec * vec3(texture(material.specular,TextCoord));
		if(light[index].lighttype == 0){
			result = ambient+diffuse+specular;
		}else if(light[index].lighttype == 1){
			result = attenuation*(diffuse+specular)+ambient;
		}else{
			result = attenuation*intensity*(diffuse+specular)+ambient;
		}
	}
	return result;
}
void main() 
{
	vec3 viewDir = normalize(viewPos-fragPos);
	vec3 result = calculateLight(0,viewDir);
	FragColor = vec4(result,1.0f);
}